--- Creacion de Vistas en Staging

Use dw

select * from dbo.FACT_VENTAS
select * from dbo.DIM_PRODUCTO




-- Producto 

CREATE VIEW V_PRODUCTO AS(
SELECT UPPER(CAST(PJ.CODIGO_PRODUCTO AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PJ.NOMBRE) NOMBRE_PRODUCTO, UPPER(PJ.GAMA) CATEGORIA_PRODUCTO, UPPER(GPJ.DESCRIPCION_TEXTO)  DESCRIPCION_CATEGORIA, 
UPPER(PJ.PRECIO_VENTA) PRECIO_VENTA, UPPER(PJ.CANTIDAD_EN_STOCK) CANTIDAD_EN_STOCK, UPPER(PJ.PROVEEDOR) PROVEEDOR
FROM PRODUCTO PJ
LEFT JOIN GAMA_PRODUCTO GPJ ON PJ.GAMA = GPJ.GAMA

UNION ALL

SELECT UPPER(CAST(PN.ProductID AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PN.ProductName) NOMBRE_PRODUCTO, UPPER(CN.CategoryName) CATEGORIA_PRODUCTO, UPPER(CN.Description) DESCRIPCION_CATEGORIA, 
UPPER(PN.UnitPrice) PRECIO_VENTA, UPPER(PN.UnitsInStock) CANTIDAD_EN_STOCK, UPPER(SN.CompanyName) PROVEEDOR
FROM Products PN
LEFT JOIN Suppliers SN ON SN.SupplierID = PN.SupplierID
LEFT JOIN Categories CN ON CN.CategoryID = PN.CategoryID
)

SELECT * FROM V_PRODUCTO


--  Empleado

CREATE VIEW V_EMPLEADO AS (
    SELECT 
        UPPER(EJ.CODIGO_EMPLEADO) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2)) AS NOMBRE_EMPLEADO, 
        UPPER(EJ.PUESTO) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN OJ.TELEFONO LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita paréntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EJ.EXTENSION) AS EXTENSION, 
        UPPER(ISNULL(OJ.REGION, OJ.CIUDAD)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(OJ.CIUDAD) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN OJ.PAIS IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN OJ.PAIS IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE OJ.PAIS 
            END
        ) AS PAIS, -- Unificación de nombres de países
        UPPER(OJ.CODIGO_POSTAL) AS CODIGO_POSTAL,
        UPPER(CONCAT(OJ.LINEA_DIRECCION1, ' ', ISNULL(OJ.LINEA_DIRECCION2, ''))) AS DIRECCION
    FROM EMPLEADO EJ
    LEFT JOIN OFICINA OJ ON OJ.CODIGO_OFICINA = EJ.CODIGO_OFICINA

    UNION ALL

    SELECT 
        UPPER(EN.EmployeeID) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EN.FirstName, ' ', EN.LastName)) AS NOMBRE_EMPLEADO, 
        UPPER(EN.Title) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN EN.HomePhone LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita paréntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EN.Extension) AS EXTENSION, 
        UPPER(ISNULL(EN.Region, EN.City)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(EN.City) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN EN.Country IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN EN.Country IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE EN.Country 
            END
        ) AS PAIS, -- Unificación de nombres de países
        UPPER(EN.PostalCode) AS CODIGO_POSTAL, 
        UPPER(EN.Address) AS DIRECCION
    FROM Employees EN
);



SELECT * FROM V_EMPLEADO


-- Cliente

ALTER VIEW V_CLIENTE AS

WITH SEGMENTOS_CLIENTE AS (
	SELECT CAST(CODIGO_CLIENTE AS VARCHAR (10))CODIGO_CLIENTE, SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) VENTAS,
	NTILE(4) OVER (ORDER BY SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) DESC)SEGMENTO
	FROM PEDIDO P
	INNER JOIN DETALLE_PEDIDO DP
	ON P.CODIGO_PEDIDO = DP.CODIGO_PEDIDO
	WHERE ESTADO = 'ENTREGADO'
	GROUP BY CODIGO_CLIENTE
	UNION
	SELECT CustomerID, SUM(OD.Quantity * OD.UnitPrice) VENTAS,
	NTILE(4) OVER (ORDER BY SUM(OD.Quantity * OD.UnitPrice) DESC)SEGMENTO
	FROM Orders O
	INNER JOIN OrderDetails OD
	ON O.OrderID = OD.OrderID
	GROUP BY CustomerID
)
SELECT
VMC.CODIGO_CLIENTE,
UPPER(NOMBRE_CLIENTE) NOMBRE_CLIENTE, 
UPPER(ISNULL(ASESOR_VENTAS, 'Lorena Paxton') )ASESOR_VENTAS,
UPPER(CIUDAD) CIUDAD,
UPPER(ISNULL(REGION, CIUDAD))REGION,
UPPER(CASE WHEN PAIS = 'UK' THEN 'UNITED KINGDOM' ELSE PAIS END) PAIS,
CASE WHEN ISNULL(SEGMENTO, 0) = 1 THEN 'CLASE A'
WHEN ISNULL(SEGMENTO, 0) = 2 THEN 'CLASE B'
WHEN ISNULL(SEGMENTO, 0) = 3 THEN 'CLASE C'
WHEN ISNULL(SEGMENTO, 0) = 4 THEN 'CLASE D'
ELSE 'CLASE E' END CATEGORIA
FROM (
SELECT CAST(CJ.CODIGO_CLIENTE AS VARCHAR (10)) CODIGO_CLIENTE, CJ.NOMBRE_CLIENTE, CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2) ASESOR_VENTAS,
CJ.CIUDAD, CJ.REGION, CJ.PAIS
FROM CLIENTE CJ
LEFT JOIN EMPLEADO EJ ON CJ.CODIGO_EMPLEADO_REP_VENTAS = EJ.CODIGO_EMPLEADO

UNION ALL

SELECT CN.CustomerID, CN.CompanyName, CONCAT(EN.FirstName, ' ', EN.LastName) ASESOR,
CN.City, CN.Region, CN.Country
FROM Customers CN
LEFT JOIN (
SELECT CustomerID, EmployeeID FROM Orders O
WHERE OrderID=(SELECT MAX(OrderID)FROM Orders O2 WHERE O2.CustomerID = O.CustomerID)
GROUP BY CustomerID, EmployeeID
)AE
ON CN.CustomerID = AE.CustomerID
LEFT JOIN Employees EN ON AE.EmployeeID = EN.EmployeeID
)VMC

LEFT JOIN SEGMENTOS_CLIENTE SC
ON VMC.CODIGO_CLIENTE = SC.CODIGO_CLIENTE

SELECT *
FROM V_CLIENTE




--- Creacion de Dimensiones en DW

 Use DW

--  Empleado

    CREATE TABLE DIM_EMPLEADO (
    id_empleado INT IDENTITY(1,1) PRIMARY KEY,
    codigo_empleado INT NOT NULL,
    nombre VARCHAR(50),
    apellido1 VARCHAR(50),
    apellido2 VARCHAR(50),
    extension VARCHAR(20),
    email VARCHAR(100),
    codigo_oficina VARCHAR(10),
    codigo_jefe INT,
    puesto VARCHAR(50)
);


-- Productos

CREATE TABLE DIM_PRODUCTO (
    id_producto INT IDENTITY(1,1) PRIMARY KEY,
    codigo_producto VARCHAR(50) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    gama VARCHAR(50),
    dimensiones VARCHAR(50),
    proveedor VARCHAR(100),
    descripcion VARCHAR(255),
    cantidad_en_stock INT,
    precio_venta DECIMAL(10,2),
    precio_proveedor DECIMAL(10,2)
);

-- Tiempo 

create table DIM_TIEMPO
(
    idtiempo int identity constraint pk_tiempo  PRIMARY KEY CLUSTERED,
	Fecha date not null, 
    Anio smallint not null,
    Mes smallint not null,
    Dia smallint not null,
    NMes nvarchar(30) not null,
	DiaAnnio int
)


-- Fact_Ventas /Tabla de hechos

CREATE TABLE FACT_VENTAS
(
    ID_FACT_VENTA int identity constraint PK_FACT_VENTAS  PRIMARY KEY CLUSTERED,
	ID_CLIENTE SMALLINT NOT NULL, 
    ID_PRODUCTO NVARCHAR(10) NOT NULL,
    ID_EMPLEADO SMALLINT NOT NULL,
    FECHA DATE not null,
    CANTIDAD SMALLINT NOT NULL,
	PRECIO DECIMAL NOT NULL
)



-- Insertar datos en la dimension

--Empleado
INSERT INTO DIM_EMPLEADO (codigo_empleado, nombre, apellido1, apellido2, extension, email, codigo_oficina, codigo_jefe, puesto)
SELECT CODIGO_EMPLEADO, NOMBRE, APELLIDO1, APELLIDO2, EXTENSION, EMAIL, CODIGO_OFICINA, CODIGO_JEFE, PUESTO
FROM staging.dbo.v_empleado;

select * from DIM_EMPLEADO

-- Producto
INSERT INTO DIM_PRODUCTO(CODIGO_PRODUCTO, NOMBRE_PRODUCTO, CATEGORIA_PRODUCTO, DESCRIPCION_CATEGORIA, PRECIO_VENTA, CANTIDAD_EN_STOCK,PROVEEDOR)
SELECT CODIGO_PRODUCTO, NOMBRE_PRODUCTO, CATEGORIA_PRODUCTO, DESCRIPCION_CATEGORIA, PRECIO_VENTA, CANTIDAD_EN_STOCK,PROVEEDOR FROM STAGING.DBO.V_PRODUCTO

SELECT * FROM DIM_PRODUCTO

-- Fact_Ventas
INSERT INTO FACT_VENTAS (ID_CLIENTE, ID_PRODUCTO, ID_EMPLEADO, FECHA, CANTIDAD, PRECIO)
SELECT
DC.ID_CLIENTE ID_CLIENTE,
DPD.CODIGO_PRODUCTO ID_PRODUCTO,
DE.CODIGO_EMPLEADO ID_EMPLEADO,
CAST(P.FECHA_ENTREGA AS DATE)FECHA,
DP.CANTIDAD CANTIDAD,
DP.PRECIO_UNIDAD PRECIO
FROM STAGING.DBO.PEDIDO P
INNER JOIN STAGING.DBO.DETALLE_PEDIDO DP
ON P.CODIGO_PEDIDO = DP.CODIGO_PEDIDO
INNER JOIN DIM_CLIENTE DC
ON CAST(P.CODIGO_CLIENTE AS VARCHAR(10)) = DC.CODIGO_CLIENTE
INNER JOIN DIM_PRODUCTO DPD
ON DP.CODIGO_PRODUCTO = DPD.CODIGO_PRODUCTO
INNER JOIN DIM_EMPLEADO DE
ON DC.ASESOR_VENTA = DE.NOMBRE_EMPLEADO
WHERE FECHA_ENTREGA IS NOT NULL;


SELECT * FROM FACT_VENTAS

--Tiempo 

begin

declare @fechainicio date;
declare @fechafinal date;
set @fechainicio ='2024-01-01';
set @fechafinal=getdate();
declare @Anio int;
declare @Mes int;
declare @Dia int; 
declare @DiaAnnio int ;
declare @NMes varchar(20);

while @fechainicio<@fechafinal
	begin

	SELECT @Anio = DATEPART(yy, @fechainicio)
    SELECT @Mes = DATEPART(m, @fechainicio)
    SELECT @Dia = RIGHT('0' + DATEPART(dd, @fechainicio),2)
    SELECT @NMes = DATENAME(mm, @fechainicio)
    SELECT @DiaAnnio =datepart( DAYOFYEAR, @fechainicio)

	insert into DIM_TIEMPO(
	Fecha ,     Anio ,    Mes ,    Dia ,    NMes,	DiaAnnio) 
	values (@fechainicio,@Anio,@Mes,@Dia,@NMes,@DiaAnnio)

	set @fechainicio=dateadd(day,1,@fechainicio);
	end 

end

SELECT * FROM DIM_TIEMPO

-- LLAVES FORANEAS

---CREACION DE LLAVE FORANEA CON DIM CLIENTE----


CREATE UNIQUE INDEX UQ_DIM_CLIENTE ON DIM_CLIENTE (CODIGO_CLIENTE);

ALTER TABLE FACT_VENTAS
ALTER COLUMN ID_CLIENTE NVARCHAR(30);

-- Cambiar la colación de la columna CODIGO_CLIENTE en DIM_CLIENTE
ALTER TABLE DIM_CLIENTE
ALTER COLUMN CODIGO_CLIENTE NVARCHAR(50) COLLATE Modern_Spanish_CI_AS;

-- Cambiar la colación de la columna ID_CLIENTE en FACT_VENTAS
ALTER TABLE FACT_VENTAS
ALTER COLUMN ID_CLIENTE NVARCHAR(50) COLLATE Modern_Spanish_CI_AS;

DELETE FROM FACT_VENTAS
WHERE ID_CLIENTE IN (2, 34);

ALTER TABLE FACT_VENTAS ADD CONSTRAINT FK_VENTAS_CLIENTE 
FOREIGN KEY (ID_CLIENTE) REFERENCES DIM_CLIENTE (CODIGO_CLIENTE)

---CREACION DE LLAVE FORANEO CON DIM PRODUCTO----

ALTER TABLE DIM_PRODUCTO
ADD CONSTRAINT UQ_DIM_PRODUCTO UNIQUE (CODIGO_PRODUCTO);

ALTER TABLE DIM_PRODUCTO 
ALTER COLUMN CODIGO_PRODUCTO NVARCHAR(10) COLLATE Modern_Spanish_CI_AS;

ALTER TABLE FACT_VENTAS 
ALTER COLUMN ID_PRODUCTO NVARCHAR(10) COLLATE Modern_Spanish_CI_AS;

ALTER TABLE FACT_VENTAS
ADD CONSTRAINT FK_VENTAS_PRODUCTO
FOREIGN KEY (ID_PRODUCTO) REFERENCES DIM_PRODUCTO(CODIGO_PRODUCTO);


---CREACION DE LLAVE FORANEO CON DIM EMPLEADO----

ALTER TABLE FACT_VENTAS
ALTER COLUMN ID_EMPLEADO INT;

ALTER TABLE FACT_VENTAS ADD CONSTRAINT FK_VENTAS_EMPLEADO 
FOREIGN KEY (ID_EMPLEADO) REFERENCES DIM_EMPLEADO (ID_DIM_EMPLEADO)


SELECT * FROM EMPLEADO
SELECT * FROM OFICINA

SELECT * FROM Employees
SELECT * FROM Shippers
SELECT * FROM Categories


SELECT UPPER(EJ.CODIGO_EMPLEADO) CODIGO_EMPLEADO, UPPER(CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2)) NOMBRE_EMPLEADO, UPPER(EJ.PUESTO) PUESTO_EMPLEADO, 
UPPER(OJ.TELEFONO) TELEFONO, UPPER(EJ.EXTENSION) EXTENSION, UPPER(OJ.REGION) REGION, UPPER(OJ.CIUDAD) CIUDAD, UPPER(OJ.PAIS) PAIS, UPPER(OJ.CODIGO_POSTAL) CODIGO_POSTAL,
UPPER(CONCAT(OJ.LINEA_DIRECCION1, ' ', OJ.LINEA_DIRECCION2)) DIRECCION
FROM EMPLEADO EJ
LEFT JOIN OFICINA OJ
ON OJ.CODIGO_OFICINA = EJ.CODIGO_OFICINA
UNION ALL
SELECT UPPER(EN.EmployeeID) CODIGO_EMPLEADO, UPPER(CONCAT(EN.FirstName, ' ', EN.LastName)) NOMBRE_EMPLEADO, UPPER(EN.Title) PUESTO_EMPLEADO, UPPER(EN.HomePhone) TELEFONO, 
UPPER(EN.Extension) EXTENSION, UPPER(EN.Region) REGION, UPPER(EN.City) CIUDAD, UPPER(EN.Country) PAIS, UPPER(EN.PostalCode) CODIGO_POSTAL, UPPER(EN.Address) DIRRECION
FROM Employees EN


CREATE VIEW V_EMPLEADO AS (
    SELECT 
        UPPER(EJ.CODIGO_EMPLEADO) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2)) AS NOMBRE_EMPLEADO, 
        UPPER(EJ.PUESTO) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN OJ.TELEFONO LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita par�ntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EJ.EXTENSION) AS EXTENSION, 
        UPPER(ISNULL(OJ.REGION, OJ.CIUDAD)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(OJ.CIUDAD) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN OJ.PAIS IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN OJ.PAIS IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE OJ.PAIS 
            END
        ) AS PAIS, -- Unificaci�n de nombres de pa�ses
        UPPER(OJ.CODIGO_POSTAL) AS CODIGO_POSTAL,
        UPPER(CONCAT(OJ.LINEA_DIRECCION1, ' ', ISNULL(OJ.LINEA_DIRECCION2, ''))) AS DIRECCION
    FROM EMPLEADO EJ
    LEFT JOIN OFICINA OJ ON OJ.CODIGO_OFICINA = EJ.CODIGO_OFICINA

    UNION ALL

    SELECT 
        UPPER(EN.EmployeeID) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EN.FirstName, ' ', EN.LastName)) AS NOMBRE_EMPLEADO, 
        UPPER(EN.Title) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN EN.HomePhone LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita par�ntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EN.Extension) AS EXTENSION, 
        UPPER(ISNULL(EN.Region, EN.City)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(EN.City) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN EN.Country IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN EN.Country IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE EN.Country 
            END
        ) AS PAIS, -- Unificaci�n de nombres de pa�ses
        UPPER(EN.PostalCode) AS CODIGO_POSTAL, 
        UPPER(EN.Address) AS DIRECCION
    FROM Employees EN
);



SELECT * FROM DIM_EMPLEADO
