SELECT * FROM V_CLIENTE

SELECT COUNT(1), ASESOR_VENTAS FROM V_CLIENTE
GROUP BY ASESOR_VENTAS

SELECT COUNT(1), CIUDAD FROM V_CLIENTE
GROUP BY CIUDAD

SELECT COUNT(1), REGION FROM V_CLIENTE
GROUP BY REGION

SELECT COUNT(1), PAIS FROM V_CLIENTE
GROUP BY PAIS



ALTER VIEW V_CLIENTE AS

WITH SEGMENTOS_CLIENTE AS (
	SELECT CAST(CODIGO_CLIENTE AS VARCHAR (10))CODIGO_CLIENTE, SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) VENTAS,
	NTILE(4) OVER (ORDER BY SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) DESC)SEGMENTO
	FROM PEDIDO P
	INNER JOIN DETALLE_PEDIDO DP
	ON P.CODIGO_PEDIDO = DP.CODIGO_PEDIDO
	WHERE ESTADO = 'ENTREGADO'
	GROUP BY CODIGO_CLIENTE
	UNION
	SELECT CustomerID, SUM(OD.Quantity * OD.UnitPrice) VENTAS,
	NTILE(4) OVER (ORDER BY SUM(OD.Quantity * OD.UnitPrice) DESC)SEGMENTO
	FROM Orders O
	INNER JOIN OrderDetails OD
	ON O.OrderID = OD.OrderID
	GROUP BY CustomerID
)
SELECT
VMC.CODIGO_CLIENTE,
UPPER(NOMBRE_CLIENTE) NOMBRE_CLIENTE, 
UPPER(ISNULL(ASESOR_VENTAS, 'Lorena Paxton') )ASESOR_VENTAS,
UPPER(CIUDAD) CIUDAD,
UPPER(ISNULL(REGION, CIUDAD))REGION,
UPPER(CASE WHEN PAIS = 'UK' THEN 'UNITED KINGDOM' ELSE PAIS END) PAIS,
CASE WHEN ISNULL(SEGMENTO, 0) = 1 THEN 'CLASE A'
WHEN ISNULL(SEGMENTO, 0) = 2 THEN 'CLASE B'
WHEN ISNULL(SEGMENTO, 0) = 3 THEN 'CLASE C'
WHEN ISNULL(SEGMENTO, 0) = 4 THEN 'CLASE D'
ELSE 'CLASE E' END CATEGORIA
FROM (
SELECT CAST(CJ.CODIGO_CLIENTE AS VARCHAR (10)) CODIGO_CLIENTE, CJ.NOMBRE_CLIENTE, CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2) ASESOR_VENTAS,
CJ.CIUDAD, CJ.REGION, CJ.PAIS
FROM CLIENTE CJ
LEFT JOIN EMPLEADO EJ ON CJ.CODIGO_EMPLEADO_REP_VENTAS = EJ.CODIGO_EMPLEADO

UNION ALL

SELECT CN.CustomerID, CN.CompanyName, CONCAT(EN.FirstName, ' ', EN.LastName) ASESOR,
CN.City, CN.Region, CN.Country
FROM Customers CN
LEFT JOIN (
SELECT CustomerID, EmployeeID FROM Orders O
WHERE OrderID=(SELECT MAX(OrderID)FROM Orders O2 WHERE O2.CustomerID = O.CustomerID)
GROUP BY CustomerID, EmployeeID
)AE
ON CN.CustomerID = AE.CustomerID
LEFT JOIN Employees EN ON AE.EmployeeID = EN.EmployeeID
)VMC

LEFT JOIN SEGMENTOS_CLIENTE SC
ON VMC.CODIGO_CLIENTE = SC.CODIGO_CLIENTE



SELECT *
FROM V_CLIENTE


--------------------------------------------------------------------------------------
-----USE DW-----
SELECT CODIGO_CLIENTE, SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) VENTAS,
NTILE(4) OVER (ORDER BY SUM(DP.CANTIDAD * DP.PRECIO_UNIDAD) DESC)SEGMENTO
FROM PEDIDO P
INNER JOIN DETALLE_PEDIDO DP
ON P.CODIGO_PEDIDO = DP.CODIGO_PEDIDO
WHERE ESTADO = 'ENTREGADO'
GROUP BY CODIGO_CLIENTE

SELECT CustomerID, SUM(OD.Quantity * OD.UnitPrice) VENTAS,
NTILE(4) OVER (ORDER BY SUM(OD.Quantity * OD.UnitPrice) DESC)SEGMENTO
FROM Orders O
INNER JOIN OrderDetails OD
ON O.OrderID = OD.OrderID
GROUP BY CustomerID


SELECT COUNT(*), CustomerID, EmployeeID FROM Orders O
WHERE OrderID=(SELECT MAX(OrderID)FROM Orders O2 WHERE O2.CustomerID = O.CustomerID)
GROUP BY CustomerID, EmployeeID
HAVING COUNT(1)>1

SELECT CustomerID, EmployeeID FROM Orders O
WHERE OrderID=(SELECT MAX(OrderID)FROM Orders O2 WHERE O2.CustomerID = O.CustomerID)
GROUP BY CustomerID, EmployeeID


SELECT * FROM Orders
SELECT * FROM Employees

PRODUCTO
EMPLEADO

SELECT 

SELECT
NULL ID_CLIENTE,
NULL ID_PRODUCTO,
NULL ID_EMPLEADO,
NULL FECHA,
NULL CANTIDAD,
NULL PRECIO
FROM STAGING.DBO.PEDIDO P
INNER JOIN 

SELECT * FROM PEDIDO

SELECT * FROM Orders

SELECT * FROM OrderDetails


SELECT * FROM PRODUCTO
SELECT * FROM GAMA_PRODUCTO

SELECT * FROM Products
SELECT * FROM Suppliers
SELECT * FROM Categories


SELECT UPPER(CAST(PJ.CODIGO_PRODUCTO AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PJ.NOMBRE) NOMBRE_PRODUCTO, UPPER(PJ.GAMA) CATEGORIA_PRODUCTO, UPPER(GPJ.DESCRIPCION_TEXTO)  DESCRIPCION_CATEGORIA, 
UPPER(PJ.PRECIO_VENTA) PRECIO_VENTA, UPPER(PJ.CANTIDAD_EN_STOCK) CANTIDAD_EN_STOCK, UPPER(PJ.PROVEEDOR) PROVEEDOR
FROM PRODUCTO PJ
LEFT JOIN GAMA_PRODUCTO GPJ ON PJ.GAMA = GPJ.GAMA

UNION ALL

SELECT UPPER(CAST(PN.ProductID AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PN.ProductName) NOMBRE_PRODUCTO, UPPER(CN.CategoryName) CATEGORIA_PRODUCTO, UPPER(CN.Description) DESCRIPCION_CATEGORIA, 
UPPER(PN.UnitPrice) PRECIO_VENTA, UPPER(PN.UnitsInStock) CANTIDAD_EN_STOCK, UPPER(SN.CompanyName) PROVEEDOR
FROM Products PN
LEFT JOIN Suppliers SN ON SN.SupplierID = PN.SupplierID
LEFT JOIN Categories CN ON CN.CategoryID = PN.CategoryID


CREATE VIEW V_PRODUCTO AS(
SELECT UPPER(CAST(PJ.CODIGO_PRODUCTO AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PJ.NOMBRE) NOMBRE_PRODUCTO, UPPER(PJ.GAMA) CATEGORIA_PRODUCTO, UPPER(GPJ.DESCRIPCION_TEXTO)  DESCRIPCION_CATEGORIA, 
UPPER(PJ.PRECIO_VENTA) PRECIO_VENTA, UPPER(PJ.CANTIDAD_EN_STOCK) CANTIDAD_EN_STOCK, UPPER(PJ.PROVEEDOR) PROVEEDOR
FROM PRODUCTO PJ
LEFT JOIN GAMA_PRODUCTO GPJ ON PJ.GAMA = GPJ.GAMA

UNION ALL

SELECT UPPER(CAST(PN.ProductID AS VARCHAR (10))) CODIGO_PRODUCTO, UPPER(PN.ProductName) NOMBRE_PRODUCTO, UPPER(CN.CategoryName) CATEGORIA_PRODUCTO, UPPER(CN.Description) DESCRIPCION_CATEGORIA, 
UPPER(PN.UnitPrice) PRECIO_VENTA, UPPER(PN.UnitsInStock) CANTIDAD_EN_STOCK, UPPER(SN.CompanyName) PROVEEDOR
FROM Products PN
LEFT JOIN Suppliers SN ON SN.SupplierID = PN.SupplierID
LEFT JOIN Categories CN ON CN.CategoryID = PN.CategoryID
)

SELECT * FROM V_PRODUCTO


---------------------------------------------------------------------------------
--------------------------------EMPLEADO-----------------------------------------

SELECT * FROM EMPLEADO
SELECT * FROM OFICINA

SELECT * FROM Employees
SELECT * FROM Shippers
SELECT * FROM Categories


SELECT UPPER(EJ.CODIGO_EMPLEADO) CODIGO_EMPLEADO, UPPER(CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2)) NOMBRE_EMPLEADO, UPPER(EJ.PUESTO) PUESTO_EMPLEADO, 
UPPER(OJ.TELEFONO) TELEFONO, UPPER(EJ.EXTENSION) EXTENSION, UPPER(OJ.REGION) REGION, UPPER(OJ.CIUDAD) CIUDAD, UPPER(OJ.PAIS) PAIS, UPPER(OJ.CODIGO_POSTAL) CODIGO_POSTAL,
UPPER(CONCAT(OJ.LINEA_DIRECCION1, ' ', OJ.LINEA_DIRECCION2)) DIRECCION
FROM EMPLEADO EJ
LEFT JOIN OFICINA OJ
ON OJ.CODIGO_OFICINA = EJ.CODIGO_OFICINA
UNION ALL
SELECT UPPER(EN.EmployeeID) CODIGO_EMPLEADO, UPPER(CONCAT(EN.FirstName, ' ', EN.LastName)) NOMBRE_EMPLEADO, UPPER(EN.Title) PUESTO_EMPLEADO, UPPER(EN.HomePhone) TELEFONO, 
UPPER(EN.Extension) EXTENSION, UPPER(EN.Region) REGION, UPPER(EN.City) CIUDAD, UPPER(EN.Country) PAIS, UPPER(EN.PostalCode) CODIGO_POSTAL, UPPER(EN.Address) DIRRECION
FROM Employees EN


CREATE VIEW V_EMPLEADO AS (
    SELECT 
        UPPER(EJ.CODIGO_EMPLEADO) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EJ.NOMBRE, ' ', EJ.APELLIDO1, ' ', EJ.APELLIDO2)) AS NOMBRE_EMPLEADO, 
        UPPER(EJ.PUESTO) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN OJ.TELEFONO LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(OJ.TELEFONO, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita paréntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EJ.EXTENSION) AS EXTENSION, 
        UPPER(ISNULL(OJ.REGION, OJ.CIUDAD)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(OJ.CIUDAD) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN OJ.PAIS IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN OJ.PAIS IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE OJ.PAIS 
            END
        ) AS PAIS, -- Unificación de nombres de países
        UPPER(OJ.CODIGO_POSTAL) AS CODIGO_POSTAL,
        UPPER(CONCAT(OJ.LINEA_DIRECCION1, ' ', ISNULL(OJ.LINEA_DIRECCION2, ''))) AS DIRECCION
    FROM EMPLEADO EJ
    LEFT JOIN OFICINA OJ ON OJ.CODIGO_OFICINA = EJ.CODIGO_OFICINA

    UNION ALL

    SELECT 
        UPPER(EN.EmployeeID) AS CODIGO_EMPLEADO, 
        UPPER(CONCAT(EN.FirstName, ' ', EN.LastName)) AS NOMBRE_EMPLEADO, 
        UPPER(EN.Title) AS PUESTO_EMPLEADO, 
        UPPER(
            CASE 
                WHEN EN.HomePhone LIKE '+%' 
                THEN REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
                ELSE '+' + REPLACE(REPLACE(REPLACE(EN.HomePhone, '(', ''), ')', ''), ' ', '-')
            END
        ) AS TELEFONO, -- Quita paréntesis, agrega + si no lo tiene y cambia espacios por -
        UPPER(EN.Extension) AS EXTENSION, 
        UPPER(ISNULL(EN.Region, EN.City)) AS REGION, -- Si REGION es NULL, toma CIUDAD
        UPPER(EN.City) AS CIUDAD, 
        UPPER(
            CASE 
                WHEN EN.Country IN ('USA', 'EEUU') THEN 'ESTADOS UNIDOS'
                WHEN EN.Country IN ('INGLATERRA', 'UK') THEN 'INGLATERRA'
                ELSE EN.Country 
            END
        ) AS PAIS, -- Unificación de nombres de países
        UPPER(EN.PostalCode) AS CODIGO_POSTAL, 
        UPPER(EN.Address) AS DIRECCION
    FROM Employees EN
);



SELECT * FROM V_EMPLEADO