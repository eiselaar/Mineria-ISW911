install.packages("tidyverse")
install.packages("corrplot")
install.packages("knitr")
install.packages("naniar")
library(tidyverse)
library(ggplot2)
library(corrplot)
library(knitr)
library(naniar)
datos <- read.csv("heart.csv")
datos <- read.csv("C:\Users\isela\Desktop\Mineria\RLab03Mineria\Files")
datos <- read.csv("Files/heart.csv")
datos <- read.csv("C:/Users/isela/Desktop/Mineria/RLab03Mineria/Files/heart.csv")
datos <- read.csv("C:/Users/isela/Desktop/Mineria/RLab03Mineria/Files/heart.csv")
head(datos)
str(datos)
dim(datos)
colnames(datos)
summary(datos)
datos_numericos <- datos %>% select_if(is.numeric)
estadisticas <- data.frame(
Media = sapply(datos_numericos, mean, na.rm = TRUE),
Mediana = sapply(datos_numericos, median, na.rm = TRUE),
Desv_Est = sapply(datos_numericos, sd, na.rm = TRUE),
Min = sapply(datos_numericos, min, na.rm = TRUE),
Max = sapply(datos_numericos, max, na.rm = TRUE),
Q1 = sapply(datos_numericos, function(x) quantile(x, 0.25, na.rm = TRUE)),
Q3 = sapply(datos_numericos, function(x) quantile(x, 0.75, na.rm = TRUE))
)
kable(estadisticas, caption = "Estadísticas descriptivas de variables numéricas")
nombres_espanol <- c(
"edad", "sexo", "tipo_dolor_pecho", "presion_reposo", "colesterol",
"azucar_ayunas", "ecg_reposo", "max_ritmo_cardiaco",
"angina_ejercicio", "depresion_st", "pendiente_st",
"num_vasos_fluoroscopia", "thal", "enfermedad_cardiaca"
)
if(length(nombres_espanol) == ncol(datos)) {
colnames(datos) <- nombres_espanol
} else {
print("Error: El número de nombres en español no coincide con el número de columnas")
}
head(datos)
var_cols <- sapply(datos %>% select_if(is.numeric), var, na.rm = TRUE)
print(var_cols)
datos_clean <- datos
duplicados <- sum(duplicated(datos_clean))
cat("Número de filas duplicadas:", duplicados, "\n")
if(duplicados > 0) {
datos_clean <- distinct(datos_clean)
cat("Filas después de eliminar duplicados:", nrow(datos_clean), "\n")
} else {
cat("No se encontraron filas duplicadas.\n")
}
datos_clean <- datos_clean %>%
mutate(
sexo = as.factor(sexo),
tipo_dolor_pecho = as.factor(tipo_dolor_pecho),
azucar_ayunas = as.factor(azucar_ayunas),
ecg_reposo = as.factor(ecg_reposo),
angina_ejercicio = as.factor(angina_ejercicio),
pendiente_st = as.factor(pendiente_st),
num_vasos_fluoroscopia = as.factor(num_vasos_fluoroscopia),
thal = as.factor(thal),
enfermedad_cardiaca = as.factor(enfermedad_cardiaca)
)
str(datos_clean)
valores_nulos <- colSums(is.na(datos_clean))
kable(data.frame(
Variable = names(valores_nulos),
Cantidad_Nulos = valores_nulos
))
vis_miss(datos_clean)
datos_num <- datos_clean %>% select_if(is.numeric)
par(mfrow=c(2, ceiling(ncol(datos_num)/2)))
for(col in names(datos_num)) {
boxplot(datos_clean[[col]], main=col, col="lightblue", ylab=col)
}
limites_atipicos <- data.frame(
Variable = character(),
Limite_Inferior = numeric(),
Limite_Superior = numeric(),
Cantidad_Atipicos = numeric()
)
for(col in names(datos_num)) {
Q1 <- quantile(datos_clean[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(datos_clean[[col]], 0.75, na.rm = TRUE)
IQR_val <- Q3 - Q1
limite_inf <- Q1 - 1.5 * IQR_val
limite_sup <- Q3 + 1.5 * IQR_val
# Contar atípicos
atipicos_inf <- sum(datos_clean[[col]] < limite_inf, na.rm = TRUE)
atipicos_sup <- sum(datos_clean[[col]] > limite_sup, na.rm = TRUE)
# Identificar valores atípicos
atipicos <- datos_clean[[col]][datos_clean[[col]] < limite_inf | datos_clean[[col]] > limite_sup]
limites_atipicos <- rbind(limites_atipicos,
data.frame(Variable = col,
Limite_Inferior = limite_inf,
Limite_Superior = limite_sup,
Cantidad_Atipicos = atipicos_inf + atipicos_sup))
}
kable(limites_atipicos)
for(col in names(datos_num)) {
print(
ggplot(datos_clean, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
theme_minimal() +
labs(title = paste("Distribución de", col))
)
}
ggplot(datos_clean, aes(x = edad, y = max_ritmo_cardiaco, color = enfermedad_cardiaca)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Edad vs. Ritmo Cardíaco Máximo",
x = "Edad", y = "Ritmo Cardíaco Máximo")
ggplot(datos_clean, aes(x = colesterol, y = presion_reposo, color = enfermedad_cardiaca)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Colesterol vs. Presión Arterial en Reposo",
x = "Colesterol", y = "Presión Arterial")
imputar_datos <- function(x) {
if(is.numeric(x)) {
if(any(is.na(x))) {
x[is.na(x)] <- median(x, na.rm = TRUE)
}
} else if(is.factor(x)) {
if(any(is.na(x))) {
# Para factores, imputar con la moda
moda <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- moda
}
}
return(x)
}
tratar_atipicos <- function(x) {
if(is.numeric(x)) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_val <- Q3 - Q1
limite_inf <- Q1 - 1.5 * IQR_val
limite_sup <- Q3 + 1.5 * IQR_val
# Reemplazar por límites
x[x < limite_inf] <- limite_inf
x[x > limite_sup] <- limite_sup
}
return(x)
}
datos_procesados <- datos_clean %>%
mutate(across(everything(), imputar_datos)) %>%
mutate(across(where(is.numeric), tratar_atipicos))
cat("Valores nulos después de imputación:", sum(is.na(datos_procesados)), "\n")
par(mfrow=c(2, ceiling(ncol(datos_num)/2)))
for(col in names(datos_num)) {
boxplot(datos_procesados[[col]], main=paste("Después -", col), col="lightgreen")
}
visualizar_categorica <- function(data, variable) {
ggplot(data, aes_string(x = variable, fill = "enfermedad_cardiaca")) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = paste("Distribución de", variable, "por diagnóstico"),
x = variable,
y = "Frecuencia",
fill = "Enfermedad Cardíaca") +
scale_fill_manual(values = c("0" = "#4DAF4A", "1" = "#E41A1C"),
labels = c("0" = "No", "1" = "Sí")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
vars_cat <- names(datos_procesados %>% select_if(is.factor))
vars_cat <- vars_cat[vars_cat != "enfermedad_cardiaca"] #
for(var in vars_cat) {
print(visualizar_categorica(datos_procesados, var))
}
datos_num_procesados <- datos_procesados %>%
select_if(is.numeric) %>%
# Añadir enfermedad_cardiaca como numérica para correlación
mutate(enfermedad_cardiaca = as.numeric(as.character(datos_procesados$enfermedad_cardiaca)))
matriz_correlacion <- cor(datos_num_procesados, use = "complete.obs")
corrplot(matriz_correlacion, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", number.cex = 0.7)
rangos <- sapply(datos_num_procesados, function(x) max(x) - min(x))
print(rangos)
normalizar <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
escalar <- function(x) {
return ((x - mean(x)) / sd(x))
}
datos_normalizados <- datos_num_procesados %>%
mutate(across(everything(), normalizar))
datos_escalados <- datos_num_procesados %>%
mutate(across(everything(), escalar))
par(mfrow=c(3,1))
hist(datos_num_procesados$edad, main="Edad - Original", col="lightblue", xlim=c(min(datos_num_procesados$edad), max(datos_num_procesados$edad)))
hist(datos_normalizados$edad, main="Edad - Normalizada", col="lightgreen", xlim=c(0,1))
hist(datos_escalados$edad, main="Edad - Escalada", col="lightpink", xlim=c(-3,3))
matriz_corr_norm <- cor(datos_normalizados)
corrplot(matriz_corr_norm, method = "circle", title = "Correlación después de normalización",
mar=c(0,0,1,0))
if(length(dev.list()) > 0) {
dev.off()
}
par(mar=c(2,2,2,2))
matriz_corr_norm <- cor(datos_normalizados)
corrplot(matriz_corr_norm,
method = "circle",
title = "Correlación después de normalización",
mar=c(0,0,1,0),
tl.cex = 0.7,       # Reduce el tamaño del texto de las etiquetas
tl.col = "black",   # Color del texto de las etiquetas
cl.ratio = 0.2)
par(mfrow=c(3,1))
hist(datos_num_procesados$edad, main="Edad - Original", col="lightblue", xlim=c(min(datos_num_procesados$edad), max(datos_num_procesados$edad)))
hist(datos_normalizados$edad, main="Edad - Normalizada", col="lightgreen", xlim=c(0,1))
hist(datos_escalados$edad, main="Edad - Escalada", col="lightpink", xlim=c(-3,3))
matriz_corr_norm <- cor(datos_normalizados)
corrplot(matriz_corr_norm, method = "circle", title = "Correlación después de normalización",
mar=c(0,0,1,0))
# Visualiza la matriz con parámetros ajustados
corrplot(matriz_corr_norm,
method = "circle",
title = "Correlación después de normalización",
mar=c(0,0,1,0),
tl.cex = 0.7,       # Reduce el tamaño del texto de las etiquetas
tl.col = "black",   # Color del texto de las etiquetas
cl.ratio = 0.2)
if(length(dev.list()) > 0) {
dev.off()
}
par(mar=c(2,2,2,2))
matriz_corr_norm <- cor(datos_normalizados)
corrplot(matriz_corr_norm,
method = "circle",
title = "Correlación después de normalización",
mar=c(0,0,1,0),
tl.cex = 0.7,       # Reduce el tamaño del texto de las etiquetas
tl.col = "black",   # Color del texto de las etiquetas
cl.ratio = 0.2)
corrplot(matriz_correlacion, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", number.cex = 0.7)
visualizar_categorica <- function(data, variable) {
ggplot(data, aes_string(x = variable, fill = "enfermedad_cardiaca")) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = paste("Distribución de", variable, "por diagnóstico"),
x = variable,
y = "Frecuencia",
fill = "Enfermedad Cardíaca") +
scale_fill_manual(values = c("0" = "#4DAF4A", "1" = "#E41A1C"),
labels = c("0" = "No", "1" = "Sí")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
visualizar_categorica <- function(data, variable) {
ggplot(data, aes_string(x = variable, fill = "enfermedad_cardiaca")) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = paste("Distribución de", variable, "por diagnóstico"),
x = variable,
y = "Frecuencia",
fill = "Enfermedad Cardíaca") +
scale_fill_manual(values = c("0" = "#4DAF4A", "1" = "#E41A1C"),
labels = c("0" = "No", "1" = "Sí")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
ggplot(datos_clean, aes(x = colesterol, y = presion_reposo, color = enfermedad_cardiaca)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Colesterol vs. Presión Arterial en Reposo",
x = "Colesterol", y = "Presión Arterial")
ggplot(datos_clean, aes(x = edad, y = max_ritmo_cardiaco, color = enfermedad_cardiaca)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Edad vs. Ritmo Cardíaco Máximo",
x = "Edad", y = "Ritmo Cardíaco Máximo")
ggplot(datos_clean, aes(x = colesterol, y = presion_reposo, color = enfermedad_cardiaca)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Colesterol vs. Presión Arterial en Reposo",
x = "Colesterol", y = "Presión Arterial")
for(col in names(datos_num)) {
print(
ggplot(datos_clean, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
theme_minimal() +
labs(title = paste("Distribución de", col))
)
}
